import torch.nn as nn
import torch.nn.functional as F


class CNN_6k_6k(nn.Module):
    def __init__(self):
        super(CNN_6k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_6k_5k(nn.Module):
    def __init__(self):
        super(CNN_6k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_6k_4k(nn.Module):
    def __init__(self):
        super(CNN_6k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_6k_3k(nn.Module):
    def __init__(self):
        super(CNN_6k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_6k_2k(nn.Module):
    def __init__(self):
        super(CNN_6k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_6k_1k(nn.Module):
    def __init__(self):
        super(CNN_6k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_5k_5k(nn.Module):
    def __init__(self):
        super(CNN_5k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_5k_4k(nn.Module):
    def __init__(self):
        super(CNN_5k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_5k_3k(nn.Module):
    def __init__(self):
        super(CNN_5k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_5k_2k(nn.Module):
    def __init__(self):
        super(CNN_5k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_5k_1k(nn.Module):
    def __init__(self):
        super(CNN_5k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_4k_4k(nn.Module):
    def __init__(self):
        super(CNN_4k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_4k_3k(nn.Module):
    def __init__(self):
        super(CNN_4k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_4k_2k(nn.Module):
    def __init__(self):
        super(CNN_4k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_4k_1k(nn.Module):
    def __init__(self):
        super(CNN_4k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_3k_3k(nn.Module):
    def __init__(self):
        super(CNN_3k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 2000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(2000, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(2000)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_3k_2k(nn.Module):
    def __init__(self):
        super(CNN_3k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 2000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(2000, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(2000)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_3k_1k(nn.Module):
    def __init__(self):
        super(CNN_3k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 2000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(2000, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(2000)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_2k_2k(nn.Module):
    def __init__(self):
        super(CNN_2k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(800)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_2k_1k(nn.Module):
    def __init__(self):
        super(CNN_2k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(800)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN_1k_1k(nn.Module):
    def __init__(self):
        super(CNN_1k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 600, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(600, 700, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(700, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(600)
        self.bn6 = nn.BatchNorm1d(700)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

